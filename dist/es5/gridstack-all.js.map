{"version":3,"file":"gridstack-all.js","mappings":"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","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\n * dd-base-impl.ts 9.4.0-dev\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 9.4.0-dev\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: 'clone' | HTMLElement | ((event: Event) => HTMLElement);\n  cancel?: string;\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n  protected origRelativeMouse: { x: number; y: number; };\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n\n    // get the element that is actually supposed to be dragged by\n    let handleName = option.handle.substring(1);\n    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.mouseDownEvent) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n    if ((e.target as HTMLElement).closest(skipMouseDown)) return true;\n    if (this.option.cancel) {\n      if ((e.target as HTMLElement).closest(this.option.cancel)) return true;\n    }\n\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    // preventDefault() prevents blur event which occurs just after mousedown event.\n    // if an editable content has focus, then blur must be call\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\n\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent): void {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      const rect = this.el.getBoundingClientRect();\n      this.origRelativeMouse = { x: s.clientX - rect.left, y: s.clientY - rect.top };\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style.width = this.el.offsetWidth + 'px';\n    style.height = this.el.offsetHeight + 'px';\n\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    const style = this.helper.style;\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.helper);\n    const parentOfItem = Utils.getContainerOfGridStackItem(this.helper) || document.documentElement;\n    const transformParent = Utils.getContainerForPositionFixedElement(parentOfItem);\n    const scrollParent = Utils.getScrollElement(this.helper);\n    // We need to be careful here as the html element actually also includes scroll\n    // so in this case we always need to ignore it\n    const transformParentRect =  transformParent !== document.documentElement ? transformParent.getBoundingClientRect() : { top: 0, left: 0 };\n    // when an element is scaled, the helper is positioned relative to the first transformed parent, so we need to remove the extra offset\n    const scroll = transformParent === scrollParent && transformParent !== document.documentElement\n      ? { top: scrollParent.scrollTop, left: scrollParent.scrollLeft }\n      : { top: 0, left: 0 };\n    const offsetX = transformParentRect.left;\n    const offsetY = transformParentRect.top;\n\n    // Position the element under the mouse\n    const x = (e.clientX - offsetX - (this.origRelativeMouse?.x || 0)) / scaleX + scroll.left;\n    const y = (e.clientY - offsetY - (this.origRelativeMouse?.y || 0)) / scaleY + scroll.top;\n    style.left = `${x}px`;\n    style.top = `${y}px`;\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const scrollElement = Utils.getScrollElement(this.el.parentElement);\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.helper);\n\n    const scroll = containmentEl.contains(scrollElement) ? scrollElement : { scrollTop: 0, scrollLeft: 0 };\n    return {\n      position: { // Current CSS position of the helper as { top, left } object\n        top: (offset.top - containmentRect.top) / scaleY + scroll.scrollTop,\n        left: (offset.left - containmentRect.left) / scaleX + scroll.scrollLeft,\n      }\n    };\n  }\n}\n","/**\n * dd-droppable.ts 9.4.0-dev\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.classList.contains(this.option.accept as string) || el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 9.4.0-dev\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\r\n * dd-gridstack.ts 9.4.0-dev\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n","/**\n * dd-manager.ts 9.4.0-dev\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * dd-resizable-handle.ts 9.4.0-dev\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 9.4.0-dev\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOver(e: Event): void {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOut(e: Event): void {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const containerElement = Utils.getPositionContainerElement(this.el.parentElement);\n    const containerRect = containerElement.getBoundingClientRect();\n\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left - containerRect.left,\n      top: this.originalRect.top - this.scrolled - containerRect.top\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.el);\n    const o = this.option;\n    const maxWidth = o.maxWidth ? o.maxWidth * scaleX : Number.MAX_SAFE_INTEGER;\n    const minWidth = o.minWidth ? o.minWidth * scaleX : oWidth;\n    const maxHeight = o.maxHeight ? o.maxHeight * scaleY : Number.MAX_SAFE_INTEGER;\n    const minHeight = o.minHeight ? o.minHeight * scaleY : oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    if (!this.temporalRect) return this;\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.el);\n    this.el.style.width = `${Math.round(this.temporalRect.width / scaleX)}px`;\n    this.el.style.height = `${Math.round(this.temporalRect.height / scaleY)}px`;\n    this.el.style.top = `${Math.round(this.temporalRect.top / scaleY)}px`;\n    this.el.style.left = `${Math.round(this.temporalRect.left / scaleX)}px`;\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.el);\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: (this.originalRect.height + this.scrolled),\n      left: this.originalRect.left,\n      top: (this.originalRect.top - this.scrolled)\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left / scaleX,\n        top: rect.top / scaleY,\n      },\n      size: {\n        width: rect.width / scaleX,\n        height: rect.height / scaleY,\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * touch.ts 9.4.0-dev\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  // console.log(\"pointer down\")\n  if (e.pointerType === 'mouse') return;\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  if (e.pointerType === 'mouse') return;\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  if (e.pointerType === 'mouse') return;\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * gridstack-engine.ts 9.4.0-dev\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, SaveFcn, CompactOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter */\n  public static _idSeq = 0;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true, doPack = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.cleanNodes();\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      if (doPack) this._packNodes();\n      this._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    let overMax = 0.5; // need >50%\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    if (doSort) this.sortNodes();\n    const wasBatch = this.batchMode;\n    if (!wasBatch) this.batchUpdate();\n    const wasColumnResize = this._inColumnResize;\n    if (!wasColumnResize) this._inColumnResize = true; // faster addNode()\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach((n, index, list) => {\n      let after: GridStackNode;\n      if (!n.locked) {\n        n.autoPosition = true;\n        if (layout === 'list' && index) after = list[index - 1];\n      }\n      this.addNode(n, false, after); // 'false' for add event trigger\n    });\n    if (!wasColumnResize) delete this._inColumnResize;\n    if (!wasBatch) this.batchUpdate(false);\n    return this;\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir: 1 | -1 = 1, column = this.column): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id ?? GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n    Utils.sanitizeMinMax(node);\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') { node.x = Number(node.x); }\n    if (typeof node.y == 'string') { node.y = Number(node.y); }\n    if (typeof node.w == 'string') { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x)) { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y)) { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w)) { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns,\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      if (copy.autoPosition || copy.x === undefined) { delete copy.x; delete copy.y; }\n      else copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w || 1);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n   * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n   */\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column, after?: GridStackNode): boolean {\n    let start = after ? after.y * column + (after.x + after.w) : 0;\n    let found = false;\n    for (let i = start; !found; ++i) {\n      let x = i % column;\n      let y = Math.floor(i / column);\n      if (x + node.w > column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n        if (node.x !== x || node.y !== y) node._dirty = true;\n        node.x = x;\n        node.y = y;\n        delete node.autoPosition;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false, after?: GridStackNode): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    let skipCollision: boolean;\n    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n      delete node.autoPosition; // found our slot\n      skipCollision = true;\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    if (!skipCollision) this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n._id === node._id)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n._id !== node._id);\n    if (!node._isAboutToRemove) this._packNodes(); // if dragged out, no need to relayout as already done...\n    this._notify([node]);\n    return this;\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (!this.nodes.length) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n._id === node._id) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n    // (case where widget was somehow added past our max #2449)\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined && !this.batchMode) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (!o.forceCollide && Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true, saveCB?: SaveFcn): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      // use layout info fields instead if set\n      let w: GridStackNode = {...n, ...(wl || {})};\n      Utils.removeInternalForSave(w, !saveElement);\n      if (saveCB) saveCB(n, w);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (n.y >= 0 && node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public columnChanged(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // simpler shortcuts layouts\n    const doCompact = layout === 'compact' || layout === 'list';\n    if (doCompact) {\n      this.sortNodes(1, prevColumn); // sort with original layout once and only once (new column will affect order otherwise)\n    }\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n    if (column < prevColumn) this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order (item passed in) rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    if (column > prevColumn && this._layouts) {\n      const cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            if (!doCompact && !cacheNode.autoPosition) {\n              n.x = cacheNode.x ?? n.x;\n              n.y = cacheNode.y ?? n.y;\n            }\n            n.w = cacheNode.w ?? n.w;\n            if (cacheNode.x == undefined || cacheNode.y === undefined) n.autoPosition = true;\n          }\n        });\n      }\n\n      // if we found cache re-use those nodes that are still current\n      cacheNodes.forEach(cacheNode => {\n        let j = nodes.findIndex(n => n._id === cacheNode._id);\n        if (j !== -1) {\n          const n = nodes[j];\n          // still current, use cache info positions\n          if (doCompact) {\n            n.w = cacheNode.w; // only w is used, and don't trim the list\n            return;\n          }\n          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n            this.findEmptyPosition(cacheNode, newNodes);\n          }\n          if (!cacheNode.autoPosition) {\n            n.x = cacheNode.x ?? n.x;\n            n.y = cacheNode.y ?? n.y;\n            n.w = cacheNode.w ?? n.w;\n            newNodes.push(n);\n          }\n          nodes.splice(j, 1);\n        }\n      });\n    }\n\n    // much simpler layout that just compacts\n    if (doCompact) {\n      this.compact(layout, false);\n    } else {\n      // ...and add any extra non-cached ones\n      if (nodes.length) {\n        if (typeof layout === 'function') {\n          layout(column, prevColumn, newNodes, nodes);\n        } else if (!domOrder) {\n          let ratio = (doCompact || layout === 'none') ? 1 : column / prevColumn;\n          let move = (layout === 'move' || layout === 'moveScale');\n          let scale = (layout === 'scale' || layout === 'moveScale');\n          nodes.forEach(node => {\n            // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n            node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n            node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n            newNodes.push(node);\n          });\n          nodes = [];\n        }\n      }\n\n      // finally re-layout them in reverse order (to get correct placement)\n      if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n      this._inColumnResize = true; // prevent cache update\n      this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n      newNodes.forEach(node => {\n        this.addNode(node, false); // 'false' for add event trigger\n        delete node._orig; // make sure the commit doesn't try to restore things back to original\n      });\n    }\n\n    this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n    this.batchUpdate(false, !doCompact);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id ?? GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id ?? GridStackEngine._idSeq++;\n    let l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    if (n.autoPosition || n.x === undefined) { delete l.x; delete l.y; if (n.autoPosition) l.autoPosition = true; }\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(l);\n    else\n      this._layouts[column][index] = l;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n  public removeNodeFromLayoutCache(n: GridStackNode) {\n    if (!this._layouts) {\n      return;\n    }\n    for (let i = 0; i < this._layouts.length; i++) {\n      let index = this.findCacheLayout(n, i);\n      if (index !== -1) {\n        this._layouts[i].splice(index, 1);\n      }\n    }\n  }\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 9.4.0-dev\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions,\r\n  dragInDefaultOptions, GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn, SaveFcn, CompactOptions, GridStackMoveOpts, ResizeToContentFcn } from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | 'resizecontent' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    let el = parent as GridHTMLElement;\r\n    if (el.gridstack) {\r\n      // already a grid - set option and load data\r\n      const grid = el.gridstack;\r\n      if (opt) grid.opts = {...grid.opts, ...opt};\r\n      if (opt.children !== undefined) grid.load(opt.children);\r\n      return grid;\r\n    }\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || GridStack.addRemoveCB) {\r\n      if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n        parent.appendChild(el);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  public static addRemoveCB?: AddRemoveFcn;\r\n\r\n  /**\r\n   * callback during saving to application can inject extra data for each widget, on top of the grid layout properties\r\n   */\r\n  public static saveCB?: SaveFcn;\r\n\r\n  /** callback to use for resizeToContent instead of the built in one */\r\n  public static resizeToContentCB?: ResizeToContentFcn;\r\n  /** parent class for sizing content. defaults to '.grid-stack-item-content' */\r\n  public static resizeToContentParent = '.grid-stack-item-content';\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n  protected resizeObserver: ResizeObserver;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _sizeThrottle: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected prevWidth: number;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n  private _skipInitialResize: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass || gridDefaults.removableOptions.accept,\r\n        decline: gridDefaults.removableOptions.decline\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    const grandParent: GridItemHTMLElement = this.el.parentElement?.parentElement;\r\n    let parentGridItem = grandParent?.classList.contains(gridDefaults.itemClass) ? grandParent.gridstackNode : undefined;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'gs-id-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (this.opts.children) {\r\n      let children = this.opts.children;\r\n      delete this.opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    this.el.classList.add('gs-' + this.opts.column);\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackNode): w is GridStackNode { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: GridItemHTMLElement;\r\n    let node: GridStackNode;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      node = options = els;\r\n      if (node?.el) {\r\n        el = node.el; // re-use element stored in the node\r\n      } else if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(this.el, options, true, false);\r\n      } else {\r\n        let content = options?.content || '';\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n      }\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\r\n    node = el.gridstackNode;\r\n    if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id)) return el;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    this.makeWidget(el, options);\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if (node.subGrid?.el) return node.subGrid; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGridOpts;\r\n      grid = grid.parentGridItem?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({...(subGridTemplate || {}), children: undefined, ...(ops || node.subGridOpts)});\r\n    node.subGridOpts = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGridOpts;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (GridStack.addRemoveCB) {\r\n        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n        newItem = doc.body.children[0] as HTMLElement;\r\n        newItem.appendChild(content);\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n        content = doc.body.children[0] as HTMLElement;\r\n        node.el.appendChild(content);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB): GridStackWidget[] | GridStackOptions {\r\n    // return copied GridStackWidget (with optionally .el) we can modify at will...\r\n    let list = this.engine.save(saveContent, saveCB);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent && !saveCB) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid?.el) {\r\n          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\r\n          n.subGridOpts = (saveGridOpt ? listOrOpt : {children: listOrOpt}) as GridStackOptions;\r\n          delete n.subGrid;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   */\r\n  public load(items: GridStackWidget[], addRemove: boolean | AddRemoveFcn = GridStack.addRemoveCB || true): GridStack {\r\n    items = Utils.cloneDeep(items); // so we can mod\r\n    // if passed list has coordinates, use them (insert from end to beginning for conflict resolution) else force widget same order\r\n    const haveCoord = items.some(w => w.x !== undefined || w.y !== undefined);\r\n    if (haveCoord) items = Utils.sort(items, -1, this._prevColumn || this.getColumn());\r\n    this._insertNotAppend = haveCoord; // if we create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => ((n.x || 0) + n.w) > (this.opts.column as number))) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option so creating will use it\r\n    const prevCB = GridStack.addRemoveCB;\r\n    if (typeof(addRemove) === 'function') GridStack.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        if (!n.id) return;\r\n        let item = Utils.find(items, n.id);\r\n        if (!item) {\r\n          if (GridStack.addRemoveCB)\r\n            GridStack.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets - starting with removing items in the new layout we will reposition\r\n    // to reduce collision and add no-coord ones at next available spot\r\n    let updateNodes: GridStackWidget[] = [];\r\n    this.engine.nodes = this.engine.nodes.filter(n => {\r\n      if (Utils.find(items, n.id)) { updateNodes.push(n); return false; } // remove if found from list\r\n      return true;\r\n    });\r\n    let widthChanged = false;\r\n    items.forEach(w => {\r\n      let item = Utils.find(updateNodes, w.id);\r\n      if (item) {\r\n        // if item sizes to content, re-use the exiting height so it's a better guess at the final size 9same if width doesn't change)\r\n        if (Utils.shouldSizeToContent(item)) w.h = item.h;\r\n        // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\r\n        if (w.autoPosition || w.x === undefined || w.y === undefined) {\r\n          w.w = w.w || item.w;\r\n          w.h = w.h || item.h;\r\n          this.engine.findEmptyPosition(w);\r\n        }\r\n        widthChanged = widthChanged || (w.w !== undefined && w.w !== item.w);\r\n\r\n        // add back to current list BUT force a collision check if it 'appears' we didn't change to make sure we don't overlap others now\r\n        this.engine.nodes.push(item);\r\n        if (Utils.samePos(item, w)) {\r\n          this.moveNode(item, {...w, forceCollide: true});\r\n          Utils.copyPos(w, item, true);\r\n        }\r\n\r\n        this.update(item.el, w);\r\n        if (w.subGridOpts?.children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.doContentResize(widthChanged, true); // we only need to wait for animation if we changed any widths\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._updateContainerHeight();\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    this.doContentResize(false, true); // no anim wait, but use attributes since we only change row height\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * re-layout grid items to reclaim any empty space. Options are:\r\n   * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\r\n   * 'compact' might re-order items to fill any empty space\r\n   *\r\n   * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\r\n   */\r\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStack {\r\n    this.engine.compact(layout, doSort);\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (!column || column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('gs-' + oldColumn);\r\n    this.el.classList.add('gs-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.columnChanged(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    this.doContentResize();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this.offAll();\r\n    this._updateResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n      this.el.removeAttribute('gs-current-row');\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   * @param options widget definition to use instead of reading attributes or using default sizing values\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"1\" gs-w=\"3\"></div>');\r\n   * grid.el.appendChild('<div id=\"2\"></div>');\r\n   * grid.makeWidget('1');\r\n   * grid.makeWidget('2', {w:2, content: 'hello'});\r\n   */\r\n  public makeWidget(els: GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true, options);\r\n    const node = el.gridstackNode;\r\n\r\n    this._updateContainerHeight();\r\n\r\n    this.doContentResize(false, false, node);\r\n\r\n    // see if there is a sub-grid to create\r\n    if (node.subGridOpts) {\r\n      this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this._prevColumn && this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => (callback as GridStackNodesHandler)(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize'\r\n      || name === 'resizestop' || name === 'dropped' || name === 'resizecontent') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /** remove all event handlers */\r\n  public offAll(): GridStack {\r\n    Object.keys(this._gsEventHandler).forEach(key => this.off(key));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      if (GridStack.addRemoveCB) {\r\n        GridStack.addRemoveCB(this.el, node, false, false);\r\n      }\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (!!this.opts.staticGrid === val) return this;\r\n    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el?.gridstackNode;\r\n      if (!n) return;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n      delete w.id;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content !== undefined) {\r\n        const itemContent = el.querySelector('.grid-stack-item-content');\r\n        if (itemContent && itemContent.innerHTML !== w.content) {\r\n          itemContent.innerHTML = w.content;\r\n          // restore any sub-grid back\r\n          if (n.subGrid?.el) {\r\n            itemContent.appendChild(n.subGrid.el);\r\n            if (!n.subGrid.opts.styleInHead) n.subGrid._updateStyles(true); // force create\r\n          }\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n      Utils.sanitizeMinMax(n);\r\n\r\n      // finally move the widget\r\n      if (m !== undefined) this.moveNode(n, m);\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  private moveNode(n: GridStackNode, m: GridStackMoveOpts) {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(n)\r\n      .moveNode(n, m);\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n    this.engine.endUpdate();\r\n  }\r\n\r\n  /**\r\n   * Updates widget height to match the content height to avoid v-scrollbar or dead space.\r\n   * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\r\n   * useAttrSize set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\r\n   */\r\n  public resizeToContent(el: GridItemHTMLElement, useAttrSize = false) {\r\n    if (!el) return;\r\n    el.classList.remove('size-to-content-max');\r\n    if (!el.clientHeight) return; // 0 when hidden, skip\r\n    let n = el.gridstackNode;\r\n    if (!n) return;\r\n    const grid = n.grid;\r\n    if (!grid) return;\r\n    if (el.parentElement !== grid.el) return; // skip if we are not inside a grid\r\n    const cell = grid.getCellHeight();\r\n    if (!cell) return;\r\n    let height = useAttrSize && n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\r\n    let item: Element;\r\n    if (n.resizeToContentParent) item = el.querySelector(n.resizeToContentParent);\r\n    if (!item) item = el.querySelector(GridStack.resizeToContentParent);\r\n    if (!item) return;\r\n    const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\r\n    const itemH = useAttrSize && n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\r\n    let wantedH: number;\r\n    if (n.subGrid) {\r\n      // sub-grid - use their actual row count * their cell height\r\n      wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight();\r\n    } else {\r\n      // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\r\n      const child = item.firstElementChild;\r\n      if (!child) { console.log(`Error: resizeToContent() '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`); return; }\r\n      wantedH = child.getBoundingClientRect().height || itemH;\r\n    }\r\n    if (itemH === wantedH) return;\r\n    height += wantedH - itemH;\r\n    let h = Math.ceil(height / cell);\r\n    // check for min/max and special sizing\r\n    const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent as number : 0;\r\n    if (softMax && h > softMax) {\r\n      h = softMax;\r\n      el.classList.add('size-to-content-max');  // get v-scroll back\r\n    }\r\n    if (n.minH && h < n.minH) h = n.minH;\r\n    else if (n.maxH && h > n.maxH) h = n.maxH;\r\n    if (h !== n.h) {\r\n      grid._ignoreLayoutsNodeChange = true;\r\n      grid.moveNode(n, {h});\r\n      delete grid._ignoreLayoutsNodeChange;\r\n    }\r\n  }\r\n\r\n  /** call the user resize (so they can do extra work) else our build in version */\r\n  protected resizeToContentCheck(el: GridItemHTMLElement, useAttr = false) {\r\n    if (GridStack.resizeToContentCB) GridStack.resizeToContentCB(el, useAttr);\r\n    else this.resizeToContent(el, useAttr);\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes?.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes?.length) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i+1}\"]`, `height: ${getHeight(i+1)}`); // start at 2\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    const parent = this.parentGridItem;\r\n    let row = this.getRow() + this._extraDragRow; // this checks for minRow already\r\n    const cellHeight = this.opts.cellHeight as number;\r\n    const unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n\r\n    // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\r\n    if (!parent) {\r\n      const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)['minHeight']);\r\n      if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\r\n        const minRow = Math.floor(cssMinHeight.h / cellHeight);\r\n        if (row < minRow) {\r\n          row = minRow;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    this.el.style.removeProperty('min-height');\r\n    this.el.style.removeProperty('height');\r\n    if (row) {\r\n      // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\r\n      this.el.style[parent ? 'minHeight' : 'height'] = row * cellHeight + unit;\r\n    }\r\n\r\n    // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\r\n    if (parent && !parent.grid.engine.batchMode && Utils.shouldSizeToContent(parent)) {\r\n      parent.grid.resizeToContentCheck(parent.el);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    el.classList.add(this.opts.itemClass);\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    if (Utils.shouldSizeToContent(node)) el.classList.add('size-to-content');\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\r\n    n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement, clearDefaultAttr = true): GridStackWidget {\r\n    let n: GridStackNode = {};\r\n    n.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    n.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    n.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    n.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    n.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    n.id = el.getAttribute('gs-id');\r\n\r\n    // read but never written out\r\n    n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n\r\n    // v8.x optimization to reduce un-needed attr that don't render or are default CSS\r\n    if (clearDefaultAttr) {\r\n      if (n.w === 1) el.removeAttribute('gs-w');\r\n      if (n.h === 1) el.removeAttribute('gs-h');\r\n      if (n.maxW) el.removeAttribute('gs-max-w');\r\n      if (n.minW) el.removeAttribute('gs-min-w');\r\n      if (n.maxH) el.removeAttribute('gs-max-h');\r\n      if (n.minH) el.removeAttribute('gs-min-h');\r\n    }\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in n) {\r\n      if (!n.hasOwnProperty(key)) return;\r\n      if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete n[key];\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\r\n   * or `sizeToContent` gridItem options.\r\n   */\r\n  public onResize(): GridStack {\r\n    if (!this.el?.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    if (this.prevWidth === this.el.clientWidth) return; // no-op\r\n    this.prevWidth = this.el.clientWidth\r\n    // console.log('onResize ', this.el.clientWidth);\r\n\r\n    this.batchUpdate();\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    let columnChanged = false;\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        this.column(this.parentGridItem.w, 'none');\r\n        columnChanged = true;\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize ||\r\n      (this.opts.column === 1 && !this._prevColumn);\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        // if (this.opts.animate) this.setAnimation(false); // 1 <-> 12 is too radical, turn off animation and we need it for sizeToContent\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        // if (this.opts.animate) setTimeout(() => this.setAnimation(true));\r\n        columnChanged = true;\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // update any nested grids, or items size\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) n.subGrid.onResize()\r\n    });\r\n\r\n    if (!this._skipInitialResize) this.doContentResize(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\r\n    delete this._skipInitialResize;\r\n\r\n    this.batchUpdate(false);\r\n\r\n    return this;\r\n  }\r\n\r\n  private doContentResize(delay = true, useAttr = false, n: GridStackNode = undefined) {\r\n    // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\r\n    // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\r\n    setTimeout(() => {\r\n      if (!this.engine) return;\r\n      if (n) {\r\n        if (Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\r\n      } else if (this.engine.nodes.some(n => Utils.shouldSizeToContent(n))) {\r\n        const nodes = [...this.engine.nodes]; // in case order changes while resizing one\r\n        this.batchUpdate();\r\n        nodes.forEach(n => {\r\n          if (Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\r\n        });\r\n        this.batchUpdate(false);\r\n      }\r\n      // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\r\n      if (this._gsEventHandler['resizecontent']) this._gsEventHandler['resizecontent'](null, n ? [n] : this.engine.nodes);\r\n    }, delay ? 300 + 10 : 0);\r\n  }\r\n\r\n  /** add or remove the grid element size event handler */\r\n  protected _updateResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    // or supporting new sizeToContent option.\r\n    const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.sizeToContent || !this.opts.disableOneColumnMode\r\n      || this.engine.nodes.find(n => n.sizeToContent));\r\n\r\n    if (!forceRemove && trackSize && !this.resizeObserver) {\r\n      this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);\r\n      this.resizeObserver = new ResizeObserver(() => this._sizeThrottle());\r\n      this.resizeObserver.observe(this.el);\r\n      this._skipInitialResize = true; // makeWidget will originally have called on startup\r\n    } else if ((forceRemove || !trackSize) && this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n      delete this.resizeObserver;\r\n      delete this._sizeThrottle;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '9.4.0-dev';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)\r\n   */\r\n  public static setupDragIn(dragIn?: string | HTMLElement[], dragInOptions?: DDDragInOpt, root: HTMLElement | Document = document): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    let els: HTMLElement[] = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\r\n    if (els.length) els?.forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noMove : n.noMove = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noResize : n.noResize = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      helper = helper || el;\r\n      let parent = this.el.getBoundingClientRect();\r\n      const { scaleX, scaleY } = Utils.getScaleForElement(helper);\r\n      let {top, left} = helper.getBoundingClientRect();\r\n      left = (left - parent.left) / scaleX;\r\n      top = (top - parent.top) / scaleY;\r\n      let ui: DDUIData = {position: {top, left}};\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // console.log('dropover without leave'); // TEST\r\n          let otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // load any element attributes if we don't have a node\r\n        if (!node) {\r\n          node = this._readAttr(el, false); // don't wipe external (e.g. drag toolbar) attr #2354\r\n        }\r\n        if (!node.grid) {\r\n          node._isExternal = true;\r\n          el.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = {...node, w, h, grid: this};\r\n          delete node.x;\r\n          delete node.y;\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n          node._isExternal =  // DOM needs to be re-parented on a drop\r\n          node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w; node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        this._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.engine.removeNodeFromLayoutCache(origNode);\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        delete node.grid._isTemp;\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          if (wasAdded) {\r\n            el = el.cloneNode(true) as GridItemHTMLElement;\r\n          }\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this._removeDD(el);\r\n        }\r\n        if (!wasAdded) return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);// @ts-ignore\r\n        this._writeAttr(el, node);\r\n        el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n        this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        if (subGrid) {\r\n          subGrid.parentGridItem = node;\r\n          if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._prepareDragDropByNode(node);\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);// @ts-ignore\r\n        this._triggerAddEvent();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n        \r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline)) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashEl) return this;\r\n      // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n      // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n      // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n      if (!dd.isDroppable(trashEl)) {\r\n        dd.droppable(trashEl, this.opts.removableOptions)\r\n          .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\r\n          .on(trashEl, 'dropout',  (event, el) => this._itemRemoving(el, false));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop */\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      let onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      let dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      let onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          let grid = el.gridstackNode.grid;\r\n          if (grid._gsEventHandler[event.type]) {\r\n            grid._gsEventHandler[event.type](event, target);\r\n          }\r\n          grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\r\n          grid.removeWidget(el, true, true);\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n\r\n        if (event.type === 'resizestop') {\r\n          if (Number.isInteger(node.sizeToContent)) node.sizeToContent = node.h; // new soft limit\r\n          this.doContentResize(false, true, node); // no amin wait as will use the actual sized coordinate attr\r\n        }\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start */\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n      if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n      if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize */\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      let prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        let row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      let left = ui.position.left + mLeft;\r\n      let top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) node.subGrid.onResize();\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   */\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      this._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside (like a toolbar) so nuke any node info\r\n      delete node.el;\r\n      delete el.gridstackNode;\r\n      // and restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * types.ts 9.4.0-dev\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable'},\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n  //removable\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/**\r\n * different layout options when changing # of columns, including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n * Options are:\r\n * 'list' - treat items as sorted list, keeping items (un-sized unless too big for column count) sequentially reflowing them\r\n * 'compact' - similar to list, but using compact() method which will possibly re-order items if an empty slots are available due to a larger item needing to be pushed to next row\r\n * 'moveScale' - will scale and move items by the ratio new newColumnCount / oldColumnCount\r\n * 'move' | 'scale' - will only size or move items\r\n * 'none' will leave items unchanged, unless they don't fit in column count\r\n */\r\nexport type ColumnOptions = 'list' | 'compact' | 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\nexport type CompactOptions = 'list' | 'compact';\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/** optional function called during save() to let the caller add additional custom data to the GridStackWidget structure that will get returned */\r\nexport type SaveFcn = (node: GridStackNode, w: GridStackWidget) => void;\r\n\r\nexport type ResizeToContentFcn = (el: GridItemHTMLElement, useAttr?: boolean) => void;\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /** set to true if all grid items (by default, but item can also override) height should be based on content size instead of WidgetItem.h to avoid v-scrollbars.\r\n   Note: this is still row based, not pixels, so it will use ceil(getBoundingClientRect().height / getCellHeight()) */\r\n   sizeToContent?: boolean;\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us (inside our grid-items) */\r\n  subGridOpts?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n  /** for collision check even if we don't move */\r\n  forceCollide?: boolean;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent direct resizing by the user (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents direct moving by the user (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** same as noMove+noResize but also prevents being pushed by other widgets or api (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: string;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** local (vs grid) override - see GridStackOptions.\r\n   * Note: This also allow you to set a maximum h value (but user changeable during normal resizing) to prevent unlimited content from taking too much space (get scrollbar) */\r\n  sizeToContent?: boolean | number;\r\n  /** local override of GridStack.resizeToContentParent that specify the class to use for the parent (actual) vs child (wanted) height */\r\n  resizeToContentParent?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime to get options from */\r\n  subGridOpts?: GridStackOptions;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: opts.itemClass) */\r\n  accept?: string;\r\n  /** class that cannot be removed (default: 'grid-stack-non-removable') */\r\n  decline?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** prevents dragging from starting on specified elements, listed as comma separated selectors (eg: '.no-drag'). default built in is 'input,textarea,button,select,option' */\r\n  cancel?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping: 'clone' or your own method */\r\n  helper?: 'clone' | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to parent Grid instance */\r\n  grid?: GridStack;\r\n  /** actual sub-grid instance */\r\n  subGrid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\r\n * utils.ts 9.4.0-dev\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\r\n  static getElements(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n\r\n      // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\r\n      // so if we start with a number, assume it's an id and just return that one item...\r\n      // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        const el = doc.getElementById(els);\r\n        return el ? [el] : [];\r\n      }\r\n\r\n      let list = root.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = root.querySelectorAll('.' + els);\r\n        if (!list.length) { list = root.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\r\n  static getElement(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n      if (!els.length) return null;\r\n      if (doc && els[0] === '#') {\r\n        return doc.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\r\n        return root.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        return doc.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id, then class\r\n      let el = root.querySelector(els);\r\n      if (doc && !el) { el = doc.getElementById(els) }\r\n      if (!el) { el = root.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** true if we should resize to content */\r\n  static shouldSizeToContent(n: GridStackNode | undefined): boolean {\r\n    return n?.grid && (!!n.sizeToContent || (n.grid.opts.sizeToContent && n.sizeToContent !== false));\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir: 1 | -1 = 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n    else\r\n      return nodes.sort((b, a) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n  }\r\n\r\n  /** find an item by id */\r\n  static find(nodes: GridStackNode[], id: string): GridStackNode | undefined {\r\n    return id ? nodes.find(n => n.id === id) : undefined;\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (val && typeof val === 'string') {\r\n      if (val === 'auto') h = 0;\r\n      else {\r\n        let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n        if (!match) {\r\n          throw new Error(`Invalid height val = ${val}`);\r\n        }\r\n        unit = match[2] || 'px';\r\n        h = parseFloat(match[1]);\r\n      }\r\n    } else if (typeof val === 'number') {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    if (b.x !== undefined) a.x = b.x;\r\n    if (b.y !== undefined) a.y = b.y;\r\n    if (b.w !== undefined) a.w = b.w;\r\n    if (b.h !== undefined) a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && (a.w || 1) === (b.w || 1) && (a.h || 1) === (b.h || 1);\r\n  }\r\n\r\n  /** given a node, makes sure it's min/max are valid */\r\n  static sanitizeMinMax(node: GridStackNode) {\r\n    // remove 0, undefine, null\r\n    if (!node.minW) { delete node.minW; }\r\n    if (!node.minH) { delete node.minH; }\r\n    if (!node.maxW) { delete node.maxW; }\r\n    if (!node.maxH) { delete node.maxH; }\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n  //   while (el) {\r\n  //     if (el.classList.contains(name)) return el;\r\n  //     el = el.parentElement\r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  static getPositionContainerElement(el: HTMLElement): HTMLElement {\r\n    if (!el) return null;\r\n\r\n    const style = getComputedStyle(el);\r\n\r\n    if (style.position === 'relative' || style.position === 'absolute' || style.position === 'fixed') {\r\n      return el;\r\n    } else {\r\n      return Utils.getPositionContainerElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  static getContainerOfGridStackItem(el: HTMLElement): HTMLElement {\r\n    if (!el) return null;\r\n\r\n    return el.classList.contains('grid-stack-item') || el.classList.contains('grid-stack')\r\n      ? el.parentElement\r\n      : Utils.getContainerOfGridStackItem(el.parentElement);\r\n  }\r\n\r\n  static getContainerForPositionFixedElement(el: HTMLElement): HTMLElement {\r\n    while (el && el !== document.documentElement && el.parentElement && getComputedStyle(el as HTMLElement).transform === 'none') {\r\n      el = el.parentElement;\r\n    }\r\n\r\n    return el;\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = Utils.getElement(parent);\r\n    } else {\r\n      parentNode = parent;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  public static getScaleForElement(element: HTMLElement) {\r\n    // Check if element is visible, otherwise the width/height will be of 0\r\n    while (element && !element.offsetParent) {\r\n      element = element.parentElement;\r\n    }\r\n\r\n    if (!element) {\r\n      return { scaleX: 1, scaleY: 1 };\r\n    }\r\n\r\n    const boundingClientRect = element.getBoundingClientRect();\r\n    const scaleX = boundingClientRect.width / element.offsetWidth;\r\n    const scaleY = boundingClientRect.height / element.offsetHeight;\r\n    return { scaleX, scaleY };\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(324);\n"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","this","_disabled","on","event","callback","off","enable","disable","destroy","triggerEvent","eventName","disabled","DDBaseImplement","el","option","handleName","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","addEventListener","isTouch","touchstart","pointerdown","remove","forDestroy","removeEventListener","add","dragTimeout","window","clearTimeout","mouseDownEvent","helper","updateOption","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","target","closest","cancel","dragging","dragElement","dropElement","document","touchmove","touchend","preventDefault","activeElement","blur","_callDrag","ev","Utils","initEvent","type","drag","ui","s","_dragFollow","pauseDrag","pause","Number","isInteger","setTimeout","Math","abs","x","y","grid","gridstackNode","ddElement","ddDroppable","rect","getBoundingClientRect","origRelativeMouse","clientX","left","clientY","top","_createHelper","_setupHelperContainmentStyle","_setupHelperStyle","start","parentElement","helperContainment","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","dragElementOriginStyle","DDDraggable","originStyleProp","map","prop","pointerEvents","width","offsetWidth","height","offsetHeight","willChange","transition","node","_isAboutToRemove","scaleX","getScaleForElement","scaleY","parentOfItem","getContainerOfGridStackItem","documentElement","transformParent","getContainerForPositionFixedElement","scrollParent","getScrollElement","transformParentRect","scroll","scrollTop","scrollLeft","offsetX","offsetY","getComputedStyle","match","containmentEl","scrollElement","containmentRect","offset","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDDroppable","init","DDElement","ddDraggable","indexOf","ddResizable","setupDraggable","cleanDraggable","setupResizable","DDResizable","cleanResizable","setupDroppable","cleanDroppable","resizable","value","_getDDElements","dEl","handles","getAttribute","autoHide","alwaysShowResizeHandle","resize","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","name","els","create","hosts","getElements","length","list","filter","d","DDGridStack","host","direction","moving","dir","_init","createElement","DDResizableHandle","prefix","zIndex","userSelect","appendChild","removeChild","_triggerEvent","newRect","originalRect","scrolled","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","overResizeElement","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","scrollY","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","opacity","i","oEvent","containerRect","getPositionContainerElement","constrain","_constrainSize","round","oWidth","oHeight","o","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","min","max","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","DDTouch","touchHandled","pointerLeaveTimeout","wasDragging","pointerType","releasePointerCapture","pointerId","addedNodes","removedNodes","column","maxRow","_float","float","nodes","onChange","batchUpdate","flag","doPack","batchMode","_prevFloat","cleanNodes","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","w","h","skip","didMove","newOpt","pack","moved","locked","moveNode","copyPos","undefined","skip2","skipId","_id","skip2Id","find","n","isIntercepted","collideAll","directionCollideCoverage","collides","_rect","r0","r","overMax","r2","yOver","MAX_VALUE","xOver","cacheRects","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","layout","doSort","wasBatch","wasColumnResize","_inColumnResize","copyNodes","index","after","autoPosition","addNode","val","sort","_updating","_orig","newY","prepareNode","resizing","GridStackEngine","_idSeq","defaults","noResize","noMove","sanitizeMinMax","isNaN","nodeBoundFix","before","maxW","maxH","minW","minH","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","skipCollision","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","removeAll","_layouts","moveNodeCheck","clonedNode","changedPosConstrain","clone","canMove","getRow","c","willItFit","_willFitPos","cleanupNode","content","p","wasUndefinedPack","forceCollide","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","reduce","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","wl","l","removeInternalForSave","layoutsNodesChange","columnChanged","prevColumn","doCompact","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","clear","removeNodeFromLayoutCache","dd","_gsEventHandler","_extraDragRow","minRow","rowAttr","toNumber","_alwaysShowResizeHandle","cloneDeep","gridDefaults","staticGrid","toBool","handleClass","removableOptions","itemClass","decline","animate","_initMargin","disableOneColumnMode","_widthOrContainer","oneColumnSize","_prevColumn","getColumn","rtl","grandParent","parentGridItem","subGrid","_isAutoCellHeight","cellHeight","cellHeightUnit","_styleSheetClass","_setStaticClass","engineClass","GridStack","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","children","load","setAnimation","_setupRemoveDrop","_setupAcceptWidget","_updateResizeEvent","options","elOrString","getGridElement","gridstack","console","error","initAll","selector","grids","getGridElements","addGrid","parent","addRemoveCB","doc","implementation","createHTMLDocument","innerHTML","class","registerEngine","_placeholder","placeholderChild","className","placeholderText","placeholderClass","placeholder","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","makeWidget","ops","nodeToAdd","saveContent","subGridTemplate","autoColumn","subGridOpts","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","margin","origShow","removeInternalAndSame","items","addRemove","haveCoord","_ignoreLayoutsNodeChange","prevCB","removed","id","updateNodes","widthChanged","item","shouldSizeToContent","doContentResize","_updateContainerHeight","_triggerRemoveEvent","_triggerAddEvent","_triggerChangeEvent","getCellHeight","forcePixel","rows","parseInt","marginDiff","cellWidth","data","parseHeight","unit","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","Array","from","offAll","setStatic","parentNode","removeAttribute","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","getElement","noData","detail","log","doAnimate","updateClass","recurse","warn","m","k","itemContent","styleInHead","changed","ddChanged","resizeToContent","useAttrSize","clientHeight","cell","resizeToContentParent","wantedH","padding","itemH","child","firstElementChild","ceil","softMax","sizeToContent","resizeToContentCheck","useAttr","resizeToContentCB","marginUnit","getMargin","elements","CustomEvent","bubbles","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","nonce","_max","addCSSRule","getHeight","cssMinHeight","setAttribute","String","removeProperty","same","attrs","clearDefaultAttr","hasOwnProperty","classes","onResize","prevWidth","oneColumn","_skipInitialResize","delay","forceRemove","trackSize","resizeObserver","disconnect","_sizeThrottle","throttle","cellHeightThrottle","ResizeObserver","observe","margins","getDD","setupDragIn","dragInOptions","dragInDefaultOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","onStartMoving","dragOrResize","onEndMoving","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","distance","updateScrollPosition","prev","extra","updateScrollResize","commit","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","apply","args","prototype","info","oldAttr","getElementById","querySelectorAll","x0","x1","y0","y1","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","parseFloat","sources","source","doMinMax","removeEl","func","isWaiting","scrollingElement","test","overflow","overflowY","transform","innerHeightOrClientHeight","innerHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","addElStyles","styles","isArray","evt","which","buttons","dataTransfer","ctrlKey","altKey","shiftKey","metaKey","element","offsetParent","boundingClientRect","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}